#!/usr/bin/env bash

# TODO: Make these dynamic as reading it from ENV
DOTFILES_DIR="$HOME/.dotfiles"
DOTFILES_DEFAULT_BRANCH="master"
DOTFILES_DEFAULT_REMOTE="origin"
DOTFILES_SSH_GIT_URL="git@github.com:epicmet/.dotfiles.git"
DOTFILES_HTTP_GIT_URL="https://github.com/epicmet/.dotfiles.git"
TEMP_EXECUTABLE="temp_dot_executable"
SSH_DIR="$HOME/.ssh"
ANSIBLE_ENTRY="$DOTFILES_DIR/ansible/local.yml"

# Exit codes. Ref -> https://www.cyberciti.biz/faq/linux-bash-exit-status-set-exit-statusin-bash/
EC_SUCCEESS=0
EC_FAILURE=1
EC_NOT_IMPLEMENTED=38

set -Eeuo pipefail

trap cleanup SIGINT SIGTERM ERR EXIT

cleanup_funcs=()
ran_cleanup=1

cleanup() {
	if [[ $ran_cleanup == 1 ]]; then
		#echo -e "${WARNING} Running cleanup ..."

		# General cleanup
		# NOT IMPLEMENTED

		# Clean up funcs
		for f in "${cleanup_funcs[@]}"; do
			run_if_exists "$f" ""
		done

		#echo -e "${CHECK_MARK} Cleanup complete"
		ran_cleanup=0
	fi
}

setup_colors() {
	if [[ -t 2 ]] && [[ $NO_COLOR == 1 ]] && [[ "${TERM-}" != "dumb" ]]; then
		# Color codes
		RED='\033[1;31m'
		YELLOW='\033[1;33m'
		BLUE="\\033[38;5;27m"
		SEA="\\033[38;5;49m"
		GREEN='\033[1;32m'
		CYAN='\033[1;36m'
		NC='\033[0m'

		# Emoji codes
		CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
		X_MARK="${RED}\xE2\x9C\x96${NC}"
		PIN="${RED}\xF0\x9F\x93\x8C${NC}"
		CLOCK="${GREEN}\xE2\x8C\x9B${NC}"
		ARROW="${SEA}\xE2\x96\xB6${NC}"
		BOOK="${RED}\xF0\x9F\x93\x8B${NC}"
		WARNING="${GREEN}\xF0\x9F\x9A\xA8${NC}"
		RIGHT_ANGLE="${GREEN}\xE2\x88\x9F${NC}"
	else
		RED='' YELLOW='' BLUE='' SEA='' GREEN='' CYAN='' NC='' CHECK_MARK='' X_MARK='' PIN='' CLOCK='' ARROW='' BOOK='' WARNING='' RIGHT_ANGLE=''
	fi
}

abort() {
	local msg="$1"
	local exit_code="${2:-$EC_FAILURE}"

	printf "${RED}%s\n${NC}" "$msg" >&2
	exit $exit_code
}

run_if_exists() {
	local func_to_run="$1"
	local func_args="$2"
	local failure_msg="${3-"Internal error. Run the script using \"--verbose\" to debug."}"
	local failure_exit_code="${4-}"

	if type "$func_to_run" >/dev/null 2>&1; then
		$func_to_run $func_args
	else
		abort "$failure_msg" "$failure_exit_code"
	fi
}

index_of() {
	local -n arr=$1
	local value=$2

	for i in "${!arr[@]}"; do
		if [[ "${arr[$i]}" = "${value}" ]]; then
			echo "${i}"
		fi
	done
}

bring_top() {
	local target="$1"
	local target_idx=$(index_of supported_os "$target")

	local temp="${supported_os[0]}"
	supported_os[0]="$target"
	supported_os[$target_idx]="$temp"
}

show_usage() {
	local exit_code=${1:-$EC_SUCCEESS}

	printf "%b\n" "$(
		cat <<EOF
USAGE:
  ${GREEN}dot${NC} [<sub-command>]

DESCRIPTION:
  Simple bash script to manage your dotfiles

FLAGS:
  --help, -h            Print this help message and exit
  --no-color, -n        Run script without colors or emojis
  --trust, -t           Trust the operating system detection
  --verbose             Show more stuff in case of an error (set -x)

SUB COMMANDS:
  <NO-SUB-COMMAND>      No sub-command is equivalent \"dot stow\" && \"dot ans update\"
  init                  This is equivalent \"dot ans init\" && \"dot hts\" && \"dot stow\"
  pull                  Either clone dotfiles or pull latest commits from the master branch
  update                Update the latest \"dot\" script from the repo
  stow                  Update the config files using stow
  ans init              Runs the \"initial\" tag of ansible playbook
  ans update            Run all ansible playbooks but \"initial\"
  hts                   Change \".dotfiles\" remote from HTTP to SSH

Run "dot <sub-command> --help" to get more information about a command
EOF
	)"

	exit $exit_code
}

NO_COLOR=1
TRUST_OP_DETECTION=1

setup_colors

# Parse dot flags
while [[ $# -ge 1 && "$1" =~ ^- && ! "$1" == "--" ]]; do
	case "$1" in
	--verbose)
		set -x
		shift
		;;
	-n | --no-color)
		NO_COLOR=0
		setup_colors
		shift
		;;
	-t | --trust)
		TRUST_OP_DETECTION=0
		shift
		;;
	-h | --help)
		show_usage
		shift
		;;
	*)
		abort "Unknown flag $1"
		;;
	esac
done

dot__pull() {
	if [[ ! -d "$DOTFILES_DIR" ]]; then
		clone_url="$DOTFILES_HTTP_GIT_URL"
		# TODO: Better ssh validation?
		if [[ -d "$SSH_DIR" ]]; then
			clone_url="$DOTFILES_SSH_GIT_URL"
		fi

		gum spin -s line --title="Cloning the git repository into \"$HOME/.dotfiles\"..." -- \
			git clone --quiet "$clone_url" "$DOTFILES_DIR" 2>&1 >/dev/null
	else
		gum spin -s line --title="Updating the git repository..." -- \
			git -C "$DOTFILES_DIR" pull "$DOTFILES_DEFAULT_REMOTE" "$DOTFILES_DEFAULT_BRANCH" --quiet >/dev/null
	fi
}

cleanup__update() {
	echo "Clean up update"

	if [[ -e "$TEMP_EXECUTABLE" ]]; then
		rm $TEMP_EXECUTABLE
	fi
}

dot__update() {
	cleanup_funcs+=("cleanup__update")

	echo -e "${SEA}Getting latest \"dot\" script..."${NC}

	curl -fsSL https://raw.githubusercontent.com/epicmet/.dotfiles/master/dot >"$TEMP_EXECUTABLE"

	sudo mv $TEMP_EXECUTABLE /usr/local/bin/dot &&
		chmod +x /usr/local/bin/dot

	exit $EC_SUCCEESS
}

dot__hts() {
	local curr_remote=$(git -C "$DOTFILES_DIR" remote get-url "$DOTFILES_DEFAULT_REMOTE")
	if [[ "${curr_remote::4}" == "http" ]]; then
		git -C "$DOTFILES_DIR" remote set-url "$DOTFILES_DEFAULT_REMOTE" "$DOTFILES_SSH_GIT_URL"
		echo -e "${CHECK_MARK} Remote successfully updated."
	else
		echo -e "${WARNING} Current \".dotfiles\" remote is not based on http: $curr_remote"
	fi
}

dot__init() {
	dot__pull
	dot__ans__init
	dot__hts
	dot__stow
}

dot__stow() {
	base_stow="bin,zsh,nvim,tmux,starship,wezterm"

	declare -A config_dirs
	config_dirs=(
		[macos]="$base_stow,yabai"
		[arch]="$base_stow,libinput-gestures"
		[ubuntu]="$base_stow"
	)

	supported_os=(
		"arch"
		"macos"
		"ubuntu"
	)

	OP=$(uname -s | tr '[:upper:]' '[:lower:]') || "$OSTYPE"

	case $OP in
	darwin*) bring_top "macos" ;;
	linux*)
		distro=$(awk -F= '/^NAME/{print $2}' /etc/os-release | tr -d '"' | tr '[:upper:]' '[:lower:]')
		case $distro in
		*arch*) bring_top "arch" ;;
		*ubuntu*) bring_top "ubuntu" ;;
		esac
		;;
	esac

	if [[ $TRUST_OP_DETECTION == 0 ]]; then
		OP="${supported_os[0]}"
	else
		OP=$(gum choose --header="Select your OS: " "${supported_os[@]}")
	fi

	stow_dir=$(echo ${config_dirs[$OP]} | sed "s/,/ /g")

	pushd $DOTFILES_DIR 2>&1 >/dev/null
	for folder in $stow_dir; do
		stow -D $folder
		stow $folder
	done
	popd 2>&1 >/dev/null
}

dot__ans() {
	if [[ $# -gt 0 ]]; then
		local ans_sub_cmd="$1"
		shift
		local ans_sub_cmd_args="${@-}"

		if [[ $ans_sub_cmd == "--" ]]; then
			abort "Not implemented support for \"--\"" $EC_NOT_IMPLEMENTED
		fi

		run_if_exists "dot__ans__$ans_sub_cmd" "$ans_sub_cmd_args" "The sub command \"ans\" does not have \"$ans_sub_cmd\" sub command!"
	else
		echo -e "${X_MARK} no sub command provided for \"ans\". See \"dot --help\""
		exit $EC_FAILURE
	fi
}

dot__ans__init() {
	echo -e "${RIGHT_ANGLE} Running \"initial\" ansible tag..."

	ansible-playbook -t initial --ask-vault-pass "$ANSIBLE_ENTRY"
}

dot__ans__update() {
	echo -e "${RIGHT_ANGLE} Syncing packages using ansible..."

	ansible-playbook --skip-tags initial "$ANSIBLE_ENTRY"
}

if [[ $# -gt 0 ]]; then
	sub_cmd="$1"
	shift
	sub_cmd_args="${@-}"

	if [[ $sub_cmd == "--" ]]; then
		abort "Not implemented support for \"--\"" $EC_NOT_IMPLEMENTED
	fi

	run_if_exists "dot__$sub_cmd" "$sub_cmd_args" "The sub command \"$sub_cmd\" not found!"

	exit $EC_SUCCEESS
else
	### No sub command ###
	dot__stow
	dot__ans__update
fi

echo -e "${CHECK_MARK} All done >:) You may want to reload your terminal. ${CYAN}Happy hacking!${NC}"
