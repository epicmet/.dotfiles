#!/usr/bin/env bash

# TODO: Make these dynamic as reading it from ENV
DOTFILES_DIR="$HOME/.dotfiles"
DOTFILES_DEFAULT_BRANCH="master"
DOTFILES_DEFAULT_REMOTE="origin"
# TODO: Configure SSH
# DOTFILES_GIT_URL="git@github.com:MahdiAghaei1/pinket.git"
DOTFILES_GIT_URL="https://github.com/MahdiAghaei1/.dotfiles.git"
TEMP_EXECUTABLE="temp_dot_executable"

# Exit codes. Ref -> https://www.cyberciti.biz/faq/linux-bash-exit-status-set-exit-statusin-bash/
EC_SUCCEESS=0
EC_FAILURE=1
EC_NOT_IMPLEMENTED=38

# TODO: Parse flags
# --yes? -> skip confirmation of OS and choose the detected one

# TODO: Add this? set -Eeuo pipefail

trap cleanup SIGINT SIGTERM ERR EXIT

cleanup_funcs=()
ran_cleanup=1

cleanup() {
	if [[ $ran_cleanup == 1 ]]; then
		#echo -e "${WARNING} Running cleanup ..."

		# General cleanup
		# NOT IMPLEMENTED

		# Clean up funcs
		for f in "${cleanup_funcs[@]}"; do
			run_if_exists "$f" ""
		done

		#echo -e "${CHECK_MARK} Cleanup complete"
		ran_cleanup=0
	fi
}

setup_colors() {
	if [[ -t 2 ]] && [[ $NO_COLOR == 1 ]] && [[ "${TERM-}" != "dumb" ]]; then
		# Color codes
		RED='\033[1;31m'
		YELLOW='\033[1;33m'
		BLUE="\\033[38;5;27m"
		SEA="\\033[38;5;49m"
		GREEN='\033[1;32m'
		CYAN='\033[1;36m'
		NC='\033[0m'

		# Emoji codes
		CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
		X_MARK="${RED}\xE2\x9C\x96${NC}"
		PIN="${RED}\xF0\x9F\x93\x8C${NC}"
		CLOCK="${GREEN}\xE2\x8C\x9B${NC}"
		ARROW="${SEA}\xE2\x96\xB6${NC}"
		BOOK="${RED}\xF0\x9F\x93\x8B${NC}"
		HOT="${ORANGE}\xF0\x9F\x94\xA5${NC}"
		WARNING="${GREEN}\xF0\x9F\x9A\xA8${NC}"
		RIGHT_ANGLE="${GREEN}\xE2\x88\x9F${NC}"
	else
		RED='' YELLOW='' BLUE='' SEA='' GREEN='' CYAN='' NC='' CHECK_MARK='' X_MARK='' PIN='' CLOCK='' ARROW='' BOOK='' HOT='' WARNING='' RIGHT_ANGLE=''
	fi
}

abort() {
	local msg="$1"
	local exit_code="${2:-$EC_FAILURE}"

	printf "${RED}%s\n${NC}" "$msg" >&2
	exit $exit_code
}

run_if_exists() {
	local func_to_run="$1"
	local func_args="$2"
	local failure_msg="${3-"Internal error. Run the script using \"--verbose\" to debug."}"
	local failure_exit_code="${4-}"

	if type "$func_to_run" >/dev/null 2>&1; then
		$func_to_run $func_args
	else
		abort "$failure_msg" "$failure_exit_code"
	fi
}

show_usage() {
	local exit_code=${1:-$EC_SUCCEESS}

	printf "%b\n" "$(
		cat <<EOF
USAGE:
  ${GREEN}dot${NC} [<sub-command>]

DESCRIPTION:
  Simple bash script to manage your dotfiles

FLAGS:
  --help, -h            Print this help message and exit
  --no-color, -n        Run script without colors or emojis
  --verbose             Show more stuff in case of an error (set -x)

SUB COMMANDS:
  <NO-SUB-COMMAND>      Without any sub commands the script runs the regular job of updating dotfiles
  update                Update the latest \"dot\" script from the repo

Run "dot <sub-command> --help" to get more information about a command
EOF
	)"

	exit $exit_code
}

NO_COLOR=1

setup_colors

# Parse dot flags
while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do
	case "$1" in
	--verbose)
		set -x
		shift
		;;
	-n | --no-color)
		NO_COLOR=0
		setup_colors
		shift
		;;
	-h | --help)
		show_usage
		shift
		;;
	*)
		abort "Unknown flag $1"
		;;
	esac
done

cleanup__update() {
	echo "Clean up update"

	if [[ -e "$TEMP_EXECUTABLE" ]]; then
		rm $TEMP_EXECUTABLE
	fi
}

dot__update() {
	cleanup_funcs+=("cleanup__update")

	echo -e "${SEA}Getting latest \"dot\" script..."${NC}

	curl -fsSL https://raw.githubusercontent.com/MahdiAghaei1/.dotfiles/master/dot >"$TEMP_EXECUTABLE"

	sudo mv $TEMP_EXECUTABLE /usr/local/bin/dot &&
		chmod +x /usr/local/bin/dot

	exit $EC_SUCCEESS
}

# Parse sub command + its flags
if [[ $# -gt 0 ]]; then
	sub_cmd="$1"
	shift

	if [[ $sub_cmd == "--" ]]; then
		abort "Not implemented support for \"--\"" $EC_NOT_IMPLEMENTED
	fi

	run_if_exists "dot__$sub_cmd" "$@" "The sub command \"$sub_cmd\" not found!"

	exit $EC_SUCCEESS
fi

if [[ ! -d "$DOTFILES_DIR" ]]; then
	gum spin -s line --title="Cloning the git repository into \"$HOME/.dotfiles\"..." -- \
		git clone --quiet "$DOTFILES_GIT_URL" "$DOTFILES_DIR" 2>&1 >/dev/null
else
	gum spin -s line --title="Updating the git repository..." -- \
		git -C "$DOTFILES_DIR" pull "$DOTFILES_DEFAULT_REMOTE" "$DOTFILES_DEFAULT_BRANCH" --quiet >/dev/null
fi

base_stow="bin,zsh,nvim,tmux,starship"

declare -A config_dirs
config_dirs=(
	[macos]="$base_stow,yabai"
	[arch]="$base_stow,libinput-gestures"
	[ubuntu]="$base_stow"
)

supported_os=(
	"arch"
	"macos"
	"ubuntu"
)

index_of() {
	local -n arr=$1
	local value=$2

	for i in "${!arr[@]}"; do
		if [[ "${arr[$i]}" = "${value}" ]]; then
			echo "${i}"
		fi
	done
}

bring_top() {
	local target="$1"
	local target_idx=$(index_of supported_os "$target")

	local temp="${supported_os[0]}"
	supported_os[0]="$target"
	supported_os[$target_idx]="$temp"
}

OP=$(uname -s | tr '[:upper:]' '[:lower:]') || "$OSTYPE"

case $OP in
darwin*) bring_top "macos" ;;
linux*)
	distro=$(awk -F= '/^NAME/{print $2}' /etc/os-release | tr -d '"' | tr '[:upper:]' '[:lower:]')
	case $distro in
	*arch*) bring_top "arch" ;;
	*ubuntu*) bring_top "ubuntu" ;;
	esac
	;;
esac

OP=$(gum choose --header="Select your OS: " "${supported_os[@]}")

stow_dir=$(echo ${config_dirs[$OP]} | sed "s/,/ /g")

pushd $DOTFILES_DIR 2>&1 >/dev/null
for folder in $stow_dir; do
	stow -D $folder
	stow $folder
done
popd 2>&1 >/dev/null

# TODO: Run ansible play book

echo -e "${CHECK_MARK} All done >:) You may want to reload your terminal. ${CYAN}Happy hacking!${NC}"
